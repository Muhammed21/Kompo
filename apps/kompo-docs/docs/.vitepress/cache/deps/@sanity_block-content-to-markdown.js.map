{
  "version": 3,
  "sources": ["../../../../../../node_modules/.pnpm/object-assign@4.1.1/node_modules/object-assign/index.js", "../../../../../../node_modules/.pnpm/@sanity+generate-help-url@0.140.0/node_modules/@sanity/generate-help-url/index.js", "../../../../../../node_modules/.pnpm/@sanity+image-url@0.140.22/node_modules/@sanity/image-url/src/parseAssetId.ts", "../../../../../../node_modules/.pnpm/@sanity+image-url@0.140.22/node_modules/@sanity/image-url/src/parseSource.ts", "../../../../../../node_modules/.pnpm/@sanity+image-url@0.140.22/node_modules/@sanity/image-url/src/urlForImage.ts", "../../../../../../node_modules/.pnpm/@sanity+image-url@0.140.22/node_modules/@sanity/image-url/src/builder.ts", "../../../../../../node_modules/.pnpm/@sanity+block-content-to-hyperscript@2.0.10/node_modules/@sanity/block-content-to-hyperscript/src/getImageUrl.js", "../../../../../../node_modules/.pnpm/@sanity+block-content-to-hyperscript@2.0.10/node_modules/@sanity/block-content-to-hyperscript/src/serializers.js", "../../../../../../node_modules/.pnpm/@sanity+block-content-to-hyperscript@2.0.10/node_modules/@sanity/block-content-to-hyperscript/src/buildMarksTree.js", "../../../../../../node_modules/.pnpm/@sanity+block-content-to-hyperscript@2.0.10/node_modules/@sanity/block-content-to-hyperscript/src/nestLists.js", "../../../../../../node_modules/.pnpm/@sanity+block-content-to-hyperscript@2.0.10/node_modules/@sanity/block-content-to-hyperscript/src/generateKeys.js", "../../../../../../node_modules/.pnpm/@sanity+block-content-to-hyperscript@2.0.10/node_modules/@sanity/block-content-to-hyperscript/src/mergeSerializers.js", "../../../../../../node_modules/.pnpm/@sanity+block-content-to-hyperscript@2.0.10/node_modules/@sanity/block-content-to-hyperscript/src/blocksToNodes.js", "../../../../../../node_modules/.pnpm/@sanity+block-content-to-hyperscript@2.0.10/node_modules/@sanity/block-content-to-hyperscript/src/internals.js", "../../../../../../node_modules/.pnpm/@sanity+block-content-to-hyperscript@2.0.10/node_modules/@sanity/block-content-to-hyperscript/internals.js", "../../../../../../node_modules/.pnpm/@sanity+block-content-to-markdown@1.0.0/node_modules/@sanity/block-content-to-markdown/src/serializers.js", "../../../../../../node_modules/.pnpm/@sanity+block-content-to-markdown@1.0.0/node_modules/@sanity/block-content-to-markdown/src/toMarkdown.js"],
  "sourcesContent": ["/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n", "var baseUrl = 'https://docs.sanity.io/help/'\n\nmodule.exports = function generateHelpUrl(slug) {\n  return baseUrl + slug\n}\n", "const example = 'image-Tb9Ew8CXIwaY6R1kjMvI0uRR-2000x3000-jpg'\n\nexport default function parseAssetId(ref: string) {\n  const [, id, dimensionString, format] = ref.split('-')\n\n  if (!id || !dimensionString || !format) {\n    throw new Error(`Malformed asset _ref '${ref}'. Expected an id like \"${example}\".`)\n  }\n\n  const [imgWidthStr, imgHeightStr] = dimensionString.split('x')\n\n  const width = +imgWidthStr\n  const height = +imgHeightStr\n\n  const isValidAssetId = isFinite(width) && isFinite(height)\n  if (!isValidAssetId) {\n    throw new Error(`Malformed asset _ref '${ref}'. Expected an id like \"${example}\".`)\n  }\n\n  return {id, width, height, format}\n}\n", "import {\n  SanityAsset,\n  SanityImageObject,\n  SanityImageSource,\n  SanityImageWithAssetStub,\n  SanityReference,\n} from './types'\n\nconst isRef = (src: SanityImageSource): src is SanityReference => {\n  const source = src as SanityReference\n  return source ? typeof source._ref === 'string' : false\n}\n\nconst isAsset = (src: SanityImageSource): src is SanityAsset => {\n  const source = src as SanityAsset\n  return source ? typeof source._id === 'string' : false\n}\n\nconst isAssetStub = (src: SanityImageSource): src is SanityImageWithAssetStub => {\n  const source = src as SanityImageWithAssetStub\n  return source && source.asset ? typeof source.asset.url === 'string' : false\n}\n\n// Convert an asset-id, asset or image to an image record suitable for processing\n// eslint-disable-next-line complexity\nexport default function parseSource(source?: SanityImageSource) {\n  if (!source) {\n    return null\n  }\n\n  let image: SanityImageObject\n\n  if (typeof source === 'string' && isUrl(source)) {\n    // Someone passed an existing image url?\n    image = {\n      asset: {_ref: urlToId(source)},\n    }\n  } else if (typeof source === 'string') {\n    // Just an asset id\n    image = {\n      asset: {_ref: source},\n    }\n  } else if (isRef(source)) {\n    // We just got passed an asset directly\n    image = {\n      asset: source,\n    }\n  } else if (isAsset(source)) {\n    // If we were passed an image asset document\n    image = {\n      asset: {\n        _ref: source._id || '',\n      },\n    }\n  } else if (isAssetStub(source)) {\n    // If we were passed a partial asset (`url`, but no `_id`)\n    image = {\n      asset: {\n        _ref: urlToId(source.asset.url),\n      },\n    }\n  } else if (typeof source.asset === 'object') {\n    // Probably an actual image with materialized asset\n    image = source\n  } else {\n    // We got something that does not look like an image, or it is an image\n    // that currently isn't sporting an asset.\n    return null\n  }\n\n  const img = source as SanityImageObject\n  if (img.crop) {\n    image.crop = img.crop\n  }\n\n  if (img.hotspot) {\n    image.hotspot = img.hotspot\n  }\n\n  return applyDefaults(image)\n}\n\nfunction isUrl(url: string) {\n  return /^https?:\\/\\//.test(`${url}`)\n}\n\nfunction urlToId(url: string) {\n  const parts = url.split('/').slice(-1)\n  return `image-${parts[0]}`.replace(/\\.([a-z]+)$/, '-$1')\n}\n\n// Mock crop and hotspot if image lacks it\nfunction applyDefaults(image: SanityImageObject) {\n  if (image.crop && image.hotspot) {\n    return image as Required<SanityImageObject>\n  }\n\n  // We need to pad in default values for crop or hotspot\n  const result = {...image}\n\n  if (!result.crop) {\n    result.crop = {\n      left: 0,\n      top: 0,\n      bottom: 0,\n      right: 0,\n    }\n  }\n\n  if (!result.hotspot) {\n    result.hotspot = {\n      x: 0.5,\n      y: 0.5,\n      height: 1.0,\n      width: 1.0,\n    }\n  }\n\n  return result as Required<SanityImageObject>\n}\n", "import parseAssetId from './parseAssetId'\nimport parseSource from './parseSource'\nimport {\n  CropSpec,\n  HotspotSpec,\n  ImageUrlBuilderOptions,\n  ImageUrlBuilderOptionsWithAsset,\n  SanityAsset,\n  SanityImageFitResult,\n  SanityImageRect,\n  SanityReference,\n} from './types'\n\nexport const SPEC_NAME_TO_URL_NAME_MAPPINGS = [\n  ['width', 'w'],\n  ['height', 'h'],\n  ['format', 'fm'],\n  ['download', 'dl'],\n  ['blur', 'blur'],\n  ['sharpen', 'sharp'],\n  ['invert', 'invert'],\n  ['orientation', 'or'],\n  ['minHeight', 'min-h'],\n  ['maxHeight', 'max-h'],\n  ['minWidth', 'min-w'],\n  ['maxWidth', 'max-w'],\n  ['quality', 'q'],\n  ['fit', 'fit'],\n  ['crop', 'crop'],\n  ['saturation', 'sat'],\n  ['auto', 'auto'],\n  ['dpr', 'dpr'],\n  ['pad', 'pad'],\n]\n\nexport default function urlForImage(options: ImageUrlBuilderOptions) {\n  let spec = {...(options || {})}\n  const source = spec.source\n  delete spec.source\n\n  const image = parseSource(source)\n  if (!image) {\n    return null\n  }\n\n  const id = (image.asset as SanityReference)._ref || (image.asset as SanityAsset)._id || ''\n  const asset = parseAssetId(id)\n\n  // Compute crop rect in terms of pixel coordinates in the raw source image\n  const cropLeft = Math.round(image.crop.left * asset.width)\n  const cropTop = Math.round(image.crop.top * asset.height)\n  const crop = {\n    left: cropLeft,\n    top: cropTop,\n    width: Math.round(asset.width - image.crop.right * asset.width - cropLeft),\n    height: Math.round(asset.height - image.crop.bottom * asset.height - cropTop),\n  }\n\n  // Compute hot spot rect in terms of pixel coordinates\n  const hotSpotVerticalRadius = (image.hotspot.height * asset.height) / 2\n  const hotSpotHorizontalRadius = (image.hotspot.width * asset.width) / 2\n  const hotSpotCenterX = image.hotspot.x * asset.width\n  const hotSpotCenterY = image.hotspot.y * asset.height\n  const hotspot = {\n    left: hotSpotCenterX - hotSpotHorizontalRadius,\n    top: hotSpotCenterY - hotSpotVerticalRadius,\n    right: hotSpotCenterX + hotSpotHorizontalRadius,\n    bottom: hotSpotCenterY + hotSpotVerticalRadius,\n  }\n\n  // If irrelevant, or if we are requested to: don't perform crop/fit based on\n  // the crop/hotspot.\n  if (!(spec.rect || spec.focalPoint || spec.ignoreImageParams || spec.crop)) {\n    spec = {...spec, ...fit({crop, hotspot}, spec)}\n  }\n\n  return specToImageUrl({...spec, asset})\n}\n\n// eslint-disable-next-line complexity\nfunction specToImageUrl(spec: ImageUrlBuilderOptionsWithAsset) {\n  const cdnUrl = spec.baseUrl || 'https://cdn.sanity.io'\n  const filename = `${spec.asset.id}-${spec.asset.width}x${spec.asset.height}.${spec.asset.format}`\n  const baseUrl = `${cdnUrl}/images/${spec.projectId}/${spec.dataset}/${filename}`\n\n  const params = []\n\n  if (spec.rect) {\n    // Only bother url with a crop if it actually crops anything\n    const {left, top, width, height} = spec.rect\n    const isEffectiveCrop =\n      left !== 0 || top !== 0 || height !== spec.asset.height || width !== spec.asset.width\n\n    if (isEffectiveCrop) {\n      params.push(`rect=${left},${top},${width},${height}`)\n    }\n  }\n\n  if (spec.bg) {\n    params.push(`bg=${spec.bg}`)\n  }\n\n  if (spec.focalPoint) {\n    params.push(`fp-x=${spec.focalPoint.x}`)\n    params.push(`fp-y=${spec.focalPoint.y}`)\n  }\n\n  const flip = [spec.flipHorizontal && 'h', spec.flipVertical && 'v'].filter(Boolean).join('')\n  if (flip) {\n    params.push(`flip=${flip}`)\n  }\n\n  // Map from spec name to url param name, and allow using the actual param name as an alternative\n  SPEC_NAME_TO_URL_NAME_MAPPINGS.forEach((mapping) => {\n    const [specName, param] = mapping\n    if (typeof spec[specName] !== 'undefined') {\n      params.push(`${param}=${encodeURIComponent(spec[specName])}`)\n    } else if (typeof spec[param] !== 'undefined') {\n      params.push(`${param}=${encodeURIComponent(spec[param])}`)\n    }\n  })\n\n  if (params.length === 0) {\n    return baseUrl\n  }\n\n  return `${baseUrl}?${params.join('&')}`\n}\n\nfunction fit(\n  source: {crop: CropSpec; hotspot: HotspotSpec},\n  spec: ImageUrlBuilderOptions\n): SanityImageFitResult {\n  let cropRect: SanityImageRect\n\n  const imgWidth = spec.width\n  const imgHeight = spec.height\n\n  // If we are not constraining the aspect ratio, we'll just use the whole crop\n  if (!(imgWidth && imgHeight)) {\n    return {width: imgWidth, height: imgHeight, rect: source.crop}\n  }\n\n  const crop = source.crop\n  const hotspot = source.hotspot\n\n  // If we are here, that means aspect ratio is locked and fitting will be a bit harder\n  const desiredAspectRatio = imgWidth / imgHeight\n  const cropAspectRatio = crop.width / crop.height\n\n  if (cropAspectRatio > desiredAspectRatio) {\n    // The crop is wider than the desired aspect ratio. That means we are cutting from the sides\n    const height = crop.height\n    const width = height * desiredAspectRatio\n    const top = crop.top\n\n    // Center output horizontally over hotspot\n    const hotspotXCenter = (hotspot.right - hotspot.left) / 2 + hotspot.left\n    let left = hotspotXCenter - width / 2\n\n    // Keep output within crop\n    if (left < crop.left) {\n      left = crop.left\n    } else if (left + width > crop.left + crop.width) {\n      left = crop.left + crop.width - width\n    }\n\n    cropRect = {\n      left: Math.round(left),\n      top: Math.round(top),\n      width: Math.round(width),\n      height: Math.round(height),\n    }\n  } else {\n    // The crop is taller than the desired ratio, we are cutting from top and bottom\n    const width = crop.width\n    const height = width / desiredAspectRatio\n    const left = crop.left\n\n    // Center output vertically over hotspot\n    const hotspotYCenter = (hotspot.bottom - hotspot.top) / 2 + hotspot.top\n    let top = hotspotYCenter - height / 2\n\n    // Keep output rect within crop\n    if (top < crop.top) {\n      top = crop.top\n    } else if (top + height > crop.top + crop.height) {\n      top = crop.top + crop.height - height\n    }\n\n    cropRect = {\n      left: Math.max(0, Math.floor(left)),\n      top: Math.max(0, Math.floor(top)),\n      width: Math.round(width),\n      height: Math.round(height),\n    }\n  }\n\n  return {\n    width: imgWidth,\n    height: imgHeight,\n    rect: cropRect,\n  }\n}\n\n// For backwards-compatibility\nexport {parseSource}\n", "import {\n  AutoMode,\n  CropMode,\n  FitMode,\n  ImageFormat,\n  ImageUrlBuilderOptions,\n  ImageUrlBuilderOptionsWithAliases,\n  Orientation,\n  SanityClientLike,\n  SanityImageSource,\n  SanityProjectDetails,\n} from './types'\nimport urlForImage, {SPEC_NAME_TO_URL_NAME_MAPPINGS} from './urlForImage'\n\nconst validFits = ['clip', 'crop', 'fill', 'fillmax', 'max', 'scale', 'min']\nconst validCrops = ['top', 'bottom', 'left', 'right', 'center', 'focalpoint', 'entropy']\nconst validAutoModes = ['format']\n\nfunction isSanityClientLike(client?: SanityClientLike): client is SanityClientLike {\n  return client ? typeof client.clientConfig === 'object' : false\n}\n\nfunction rewriteSpecName(key: string) {\n  const specs = SPEC_NAME_TO_URL_NAME_MAPPINGS\n  for (const entry of specs) {\n    const [specName, param] = entry\n    if (key === specName || key === param) {\n      return specName\n    }\n  }\n\n  return key\n}\n\nexport default function urlBuilder(options?: SanityClientLike | SanityProjectDetails) {\n  // Did we get a SanityClient?\n  const client = options as SanityClientLike\n  if (isSanityClientLike(client)) {\n    // Inherit config from client\n    const {apiHost: apiUrl, projectId, dataset} = client.clientConfig\n    const apiHost = apiUrl || 'https://api.sanity.io'\n    return new ImageUrlBuilder(null, {\n      baseUrl: apiHost.replace(/^https:\\/\\/api\\./, 'https://cdn.'),\n      projectId,\n      dataset,\n    })\n  }\n\n  // Or just accept the options as given\n  return new ImageUrlBuilder(null, options as ImageUrlBuilderOptions)\n}\n\nexport class ImageUrlBuilder {\n  public options: ImageUrlBuilderOptions\n\n  constructor(parent: ImageUrlBuilder | null, options: ImageUrlBuilderOptions) {\n    this.options = parent\n      ? {...(parent.options || {}), ...(options || {})} // Merge parent options\n      : {...(options || {})} // Copy options\n  }\n\n  withOptions(options: Partial<ImageUrlBuilderOptionsWithAliases>) {\n    const baseUrl = options.baseUrl || this.options.baseUrl\n\n    const newOptions: {[key: string]: any} = {baseUrl}\n    for (const key in options) {\n      if (options.hasOwnProperty(key)) {\n        const specKey = rewriteSpecName(key)\n        newOptions[specKey] = options[key]\n      }\n    }\n\n    return new ImageUrlBuilder(this, {baseUrl, ...newOptions})\n  }\n\n  // The image to be represented. Accepts a Sanity 'image'-document, 'asset'-document or\n  // _id of asset. To get the benefit of automatic hot-spot/crop integration with the content\n  // studio, the 'image'-document must be provided.\n  image(source: SanityImageSource) {\n    return this.withOptions({source})\n  }\n\n  // Specify the dataset\n  dataset(dataset: string) {\n    return this.withOptions({dataset})\n  }\n\n  // Specify the projectId\n  projectId(projectId: string) {\n    return this.withOptions({projectId})\n  }\n\n  // Specify background color\n  bg(bg: string) {\n    return this.withOptions({bg})\n  }\n\n  // Set DPR scaling factor\n  dpr(dpr: number) {\n    return this.withOptions({dpr})\n  }\n\n  // Specify the width of the image in pixels\n  width(width: number) {\n    return this.withOptions({width})\n  }\n\n  // Specify the height of the image in pixels\n  height(height: number) {\n    return this.withOptions({height})\n  }\n\n  // Specify focal point in fraction of image dimensions. Each component 0.0-1.0\n  focalPoint(x: number, y: number) {\n    return this.withOptions({focalPoint: {x, y}})\n  }\n\n  maxWidth(maxWidth: number) {\n    return this.withOptions({maxWidth})\n  }\n\n  minWidth(minWidth: number) {\n    return this.withOptions({minWidth})\n  }\n\n  maxHeight(maxHeight: number) {\n    return this.withOptions({maxHeight})\n  }\n\n  minHeight(minHeight: number) {\n    return this.withOptions({minHeight})\n  }\n\n  // Specify width and height in pixels\n  size(width: number, height: number) {\n    return this.withOptions({width, height})\n  }\n\n  // Specify blur between 0 and 100\n  blur(blur: number) {\n    return this.withOptions({blur})\n  }\n\n  sharpen(sharpen: number) {\n    return this.withOptions({sharpen})\n  }\n\n  // Specify the desired rectangle of the image\n  rect(left: number, top: number, width: number, height: number) {\n    return this.withOptions({rect: {left, top, width, height}})\n  }\n\n  // Specify the image format of the image. 'jpg', 'pjpg', 'png', 'webp'\n  format(format: ImageFormat) {\n    return this.withOptions({format})\n  }\n\n  invert(invert: boolean) {\n    return this.withOptions({invert})\n  }\n\n  // Rotation in degrees 0, 90, 180, 270\n  orientation(orientation: Orientation) {\n    return this.withOptions({orientation})\n  }\n\n  // Compression quality 0-100\n  quality(quality: number) {\n    return this.withOptions({quality})\n  }\n\n  // Make it a download link. Parameter is default filename.\n  forceDownload(download: boolean | string) {\n    return this.withOptions({download})\n  }\n\n  // Flip image horizontally\n  flipHorizontal() {\n    return this.withOptions({flipHorizontal: true})\n  }\n\n  // Flip image vertically\n  flipVertical() {\n    return this.withOptions({flipVertical: true})\n  }\n\n  // Ignore crop/hotspot from image record, even when present\n  ignoreImageParams() {\n    return this.withOptions({ignoreImageParams: true})\n  }\n\n  fit(value: FitMode) {\n    if (validFits.indexOf(value) === -1) {\n      throw new Error(`Invalid fit mode \"${value}\"`)\n    }\n\n    return this.withOptions({fit: value})\n  }\n\n  crop(value: CropMode) {\n    if (validCrops.indexOf(value) === -1) {\n      throw new Error(`Invalid crop mode \"${value}\"`)\n    }\n\n    return this.withOptions({crop: value})\n  }\n\n  // Saturation\n  saturation(saturation: number) {\n    return this.withOptions({saturation})\n  }\n\n  auto(value: AutoMode) {\n    if (validAutoModes.indexOf(value) === -1) {\n      throw new Error(`Invalid auto mode \"${value}\"`)\n    }\n\n    return this.withOptions({auto: value})\n  }\n\n  // Specify the number of pixels to pad the image\n  pad(pad: number) {\n    return this.withOptions({pad})\n  }\n\n  // Gets the url based on the submitted parameters\n  url() {\n    return urlForImage(this.options)\n  }\n\n  // Alias for url()\n  toString() {\n    return this.url()\n  }\n}\n", "const generateHelpUrl = require('@sanity/generate-help-url')\nconst urlBuilder = require('@sanity/image-url')\nconst objectAssign = require('object-assign')\n\nconst enc = encodeURIComponent\nconst materializeError = `You must either:\n  - Pass \\`projectId\\` and \\`dataset\\` to the block renderer\n  - Materialize images to include the \\`url\\` field.\n\nFor more information, see ${generateHelpUrl('block-content-image-materializing')}`\n\nconst getQueryString = options => {\n  const query = options.imageOptions\n  const keys = Object.keys(query)\n  if (!keys.length) {\n    return ''\n  }\n\n  const params = keys.map(key => `${enc(key)}=${enc(query[key])}`)\n  return `?${params.join('&')}`\n}\n\nconst buildUrl = props => {\n  const {node, options} = props\n  const {projectId, dataset} = options\n  const asset = node.asset\n\n  if (!asset) {\n    throw new Error('Image does not have required `asset` property')\n  }\n\n  if (asset.url) {\n    return asset.url + getQueryString(options)\n  }\n\n  if (!projectId || !dataset) {\n    throw new Error(materializeError)\n  }\n\n  const ref = asset._ref\n  if (!ref) {\n    throw new Error('Invalid image reference in block, no `_ref` found on `asset`')\n  }\n\n  return urlBuilder(objectAssign({projectId, dataset}, options.imageOptions || {}))\n    .image(node)\n    .toString()\n}\n\nmodule.exports = buildUrl\n", "const objectAssign = require('object-assign')\nconst getImageUrl = require('./getImageUrl')\n\nmodule.exports = (h, serializerOpts) => {\n  const serializeOptions = serializerOpts || {useDashedStyles: false}\n\n  // Low-level block serializer\n  function BlockSerializer(props) {\n    const {node, serializers, options, isInline, children} = props\n    const blockType = node._type\n    const serializer = serializers.types[blockType]\n    if (!serializer) {\n      throw new Error(\n        `Unknown block type \"${blockType}\", please specify a serializer for it in the \\`serializers.types\\` prop`\n      )\n    }\n\n    return h(serializer, {node, options, isInline}, children)\n  }\n\n  // Low-level span serializer\n  function SpanSerializer(props) {\n    const {mark, children} = props.node\n    const isPlain = typeof mark === 'string'\n    const markType = isPlain ? mark : mark._type\n    const serializer = props.serializers.marks[markType]\n    if (!serializer) {\n      // @todo Revert back to throwing errors?\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Unknown mark type \"${markType}\", please specify a serializer for it in the \\`serializers.marks\\` prop`\n      )\n      return h(props.serializers.markFallback, null, children)\n    }\n\n    return h(serializer, props.node, children)\n  }\n\n  // Low-level list serializer\n  function ListSerializer(props) {\n    const tag = props.type === 'bullet' ? 'ul' : 'ol'\n    return h(tag, null, props.children)\n  }\n\n  // Low-level list item serializer\n  function ListItemSerializer(props) {\n    const children =\n      !props.node.style || props.node.style === 'normal'\n        ? // Don't wrap plain text in paragraphs inside of a list item\n          props.children\n        : // But wrap any other style in whatever the block serializer says to use\n          h(props.serializers.types.block, props, props.children)\n\n    return h('li', null, children)\n  }\n\n  // Renderer of an actual block of type `block`. Confusing, we know.\n  function BlockTypeSerializer(props) {\n    const style = props.node.style || 'normal'\n\n    if (/^h\\d/.test(style)) {\n      return h(style, null, props.children)\n    }\n\n    return style === 'blockquote'\n      ? h('blockquote', null, props.children)\n      : h('p', null, props.children)\n  }\n\n  // Serializers for things that can be directly attributed to a tag without any props\n  // We use partial application to do this, passing the tag name as the first argument\n  function RawMarkSerializer(tag, props) {\n    return h(tag, null, props.children)\n  }\n\n  function UnderlineSerializer(props) {\n    const style = serializeOptions.useDashedStyles\n      ? {'text-decoration': 'underline'}\n      : {textDecoration: 'underline'}\n\n    return h('span', {style}, props.children)\n  }\n\n  function StrikeThroughSerializer(props) {\n    return h('del', null, props.children)\n  }\n\n  function LinkSerializer(props) {\n    return h('a', {href: props.mark.href}, props.children)\n  }\n\n  function ImageSerializer(props) {\n    if (!props.node.asset) {\n      return null\n    }\n\n    const img = h('img', {src: getImageUrl(props)})\n    return props.isInline ? img : h('figure', null, img)\n  }\n\n  // Serializer that recursively calls itself, producing a hyperscript tree of spans\n  function serializeSpan(span, serializers, index, options) {\n    if (span === '\\n' && serializers.hardBreak) {\n      return h(serializers.hardBreak, {key: `hb-${index}`})\n    }\n\n    if (typeof span === 'string') {\n      return serializers.text ? h(serializers.text, {key: `text-${index}`}, span) : span\n    }\n\n    let children\n    if (span.children) {\n      children = {\n        children: span.children.map((child, i) =>\n          options.serializeNode(child, i, span.children, true)\n        )\n      }\n    }\n\n    const serializedNode = objectAssign({}, span, children)\n\n    return h(serializers.span, {\n      key: span._key || `span-${index}`,\n      node: serializedNode,\n      serializers\n    })\n  }\n\n  const HardBreakSerializer = () => h('br')\n  const defaultMarkSerializers = {\n    strong: RawMarkSerializer.bind(null, 'strong'),\n    em: RawMarkSerializer.bind(null, 'em'),\n    code: RawMarkSerializer.bind(null, 'code'),\n    underline: UnderlineSerializer,\n    'strike-through': StrikeThroughSerializer,\n    link: LinkSerializer\n  }\n\n  const defaultSerializers = {\n    // Common overrides\n    types: {\n      block: BlockTypeSerializer,\n      image: ImageSerializer\n    },\n    marks: defaultMarkSerializers,\n\n    // Less common overrides\n    list: ListSerializer,\n    listItem: ListItemSerializer,\n\n    block: BlockSerializer,\n    span: SpanSerializer,\n    hardBreak: HardBreakSerializer,\n\n    // Container element\n    container: 'div',\n\n    // When we can't resolve the mark properly, use this renderer as the container\n    markFallback: 'span',\n\n    // Allow overriding text renderer, but leave undefined to just use plain strings by default\n    text: undefined,\n\n    // Empty nodes (React uses null, hyperscript with empty strings)\n    empty: ''\n  }\n\n  return {\n    defaultSerializers,\n    serializeSpan\n  }\n}\n", "const defaultMarks = ['strong', 'em', 'code', 'underline', 'strike-through']\n\nconst buildMarksTree = block => {\n  const {children, markDefs} = block\n  if (!children || !children.length) {\n    return []\n  }\n\n  const sortedMarks = children.map(sortMarksByOccurences)\n  const rootNode = {_type: 'span', children: []}\n  let nodeStack = [rootNode]\n\n  children.forEach((span, i) => {\n    const marksNeeded = sortedMarks[i]\n    if (!marksNeeded) {\n      const lastNode = nodeStack[nodeStack.length - 1]\n      lastNode.children.push(span)\n      return\n    }\n\n    let pos = 1\n\n    // Start at position one. Root is always plain and should never be removed. (?)\n    if (nodeStack.length > 1) {\n      for (pos; pos < nodeStack.length; pos++) {\n        const mark = nodeStack[pos].markKey\n        const index = marksNeeded.indexOf(mark)\n        // eslint-disable-next-line max-depth\n        if (index === -1) {\n          break\n        }\n\n        marksNeeded.splice(index, 1)\n      }\n    }\n\n    // Keep from beginning to first miss\n    nodeStack = nodeStack.slice(0, pos)\n\n    // Add needed nodes\n    let currentNode = findLastParentNode(nodeStack)\n    marksNeeded.forEach(mark => {\n      const node = {\n        _type: 'span',\n        _key: span._key,\n        children: [],\n        mark: markDefs.find(def => def._key === mark) || mark,\n        markKey: mark\n      }\n\n      currentNode.children.push(node)\n      nodeStack.push(node)\n      currentNode = node\n    })\n\n    // Split at newlines to make individual line chunks, but keep newline\n    // characters as individual elements in the array. We use these characters\n    // in the span serializer to trigger hard-break rendering\n    if (isTextSpan(span)) {\n      const lines = span.text.split('\\n')\n      for (let line = lines.length; line-- > 1; ) {\n        lines.splice(line, 0, '\\n')\n      }\n\n      currentNode.children = currentNode.children.concat(lines)\n    } else {\n      currentNode.children = currentNode.children.concat(span)\n    }\n  })\n\n  return rootNode.children\n}\n\n// We want to sort all the marks of all the spans in the following order:\n// 1. Marks that are shared amongst the most adjacent siblings\n// 2. Non-default marks (links, custom metadata)\n// 3. Built-in, plain marks (bold, emphasis, code etc)\nfunction sortMarksByOccurences(span, i, spans) {\n  if (!span.marks || span.marks.length === 0) {\n    return span.marks || []\n  }\n\n  const markOccurences = span.marks.reduce((occurences, mark) => {\n    occurences[mark] = occurences[mark] ? occurences[mark] + 1 : 1\n\n    for (let siblingIndex = i + 1; siblingIndex < spans.length; siblingIndex++) {\n      const sibling = spans[siblingIndex]\n\n      if (sibling.marks && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1) {\n        occurences[mark]++\n      } else {\n        break\n      }\n    }\n\n    return occurences\n  }, {})\n\n  const sortByOccurence = sortMarks.bind(null, markOccurences)\n\n  // Slicing because sort() mutates the input\n  return span.marks.slice().sort(sortByOccurence)\n}\n\nfunction sortMarks(occurences, markA, markB) {\n  const aOccurences = occurences[markA] || 0\n  const bOccurences = occurences[markB] || 0\n\n  if (aOccurences !== bOccurences) {\n    return bOccurences - aOccurences\n  }\n\n  const aDefaultPos = defaultMarks.indexOf(markA)\n  const bDefaultPos = defaultMarks.indexOf(markB)\n\n  // Sort default marks last\n  if (aDefaultPos !== bDefaultPos) {\n    return aDefaultPos - bDefaultPos\n  }\n\n  // Sort other marks simply by key\n  if (markA < markB) {\n    return -1\n  } else if (markA > markB) {\n    return 1\n  }\n\n  return 0\n}\n\nfunction isTextSpan(node) {\n  return (\n    node._type === 'span' &&\n    typeof node.text === 'string' &&\n    (Array.isArray(node.marks) || typeof node.marks === 'undefined')\n  )\n}\n\nfunction findLastParentNode(nodes) {\n  for (let i = nodes.length - 1; i >= 0; i--) {\n    const node = nodes[i]\n    if (node._type === 'span' && node.children) {\n      return node\n    }\n  }\n\n  return undefined\n}\n\nmodule.exports = buildMarksTree\n", "const objectAssign = require('object-assign')\n\n/* eslint-disable max-depth, complexity */\nfunction nestLists(blocks, mode = 'html') {\n  const tree = []\n  let currentList\n\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i]\n    if (!isListBlock(block)) {\n      tree.push(block)\n      currentList = null\n      continue\n    }\n\n    // Start of a new list?\n    if (!currentList) {\n      currentList = listFromBlock(block)\n      tree.push(currentList)\n      continue\n    }\n\n    // New list item within same list?\n    if (blockMatchesList(block, currentList)) {\n      currentList.children.push(block)\n      continue\n    }\n\n    // Different list props, are we going deeper?\n    if (block.level > currentList.level) {\n      const newList = listFromBlock(block)\n\n      if (mode === 'html') {\n        // Because HTML is kinda weird, nested lists needs to be nested within list items\n        // So while you would think that we could populate the parent list with a new sub-list,\n        // We actually have to target the last list element (child) of the parent.\n        // However, at this point we need to be very careful - simply pushing to the list of children\n        // will mutate the input, and we don't want to blindly clone the entire tree.\n\n        // Clone the last child while adding our new list as the last child of it\n        const lastListItem = lastChild(currentList)\n        const newLastChild = objectAssign({}, lastListItem, {\n          children: lastListItem.children.concat(newList)\n        })\n\n        // Swap the last child\n        currentList.children[currentList.children.length - 1] = newLastChild\n      } else {\n        currentList.children.push(newList)\n      }\n\n      // Set the newly created, deeper list as the current\n      currentList = newList\n      continue\n    }\n\n    // Different list props, are we going back up the tree?\n    if (block.level < currentList.level) {\n      // Current list has ended, and we need to hook up with a parent of the same level and type\n      const match = findListMatching(tree[tree.length - 1], block)\n      if (match) {\n        currentList = match\n        currentList.children.push(block)\n        continue\n      }\n\n      // Similar parent can't be found, assume new list\n      currentList = listFromBlock(block)\n      tree.push(currentList)\n      continue\n    }\n\n    // Different list props, different list style?\n    if (block.listItem !== currentList.listItem) {\n      const match = findListMatching(tree[tree.length - 1], {level: block.level})\n      if (match && match.listItem === block.listItem) {\n        currentList = match\n        currentList.children.push(block)\n        continue\n      } else {\n        currentList = listFromBlock(block)\n        tree.push(currentList)\n        continue\n      }\n    }\n\n    // eslint-disable-next-line no-console\n    console.warn('Unknown state encountered for block', block)\n    tree.push(block)\n  }\n\n  return tree\n}\n\nfunction isListBlock(block) {\n  return Boolean(block.listItem)\n}\n\nfunction blockMatchesList(block, list) {\n  return block.level === list.level && block.listItem === list.listItem\n}\n\nfunction listFromBlock(block) {\n  return {\n    _type: 'list',\n    _key: `${block._key}-parent`,\n    level: block.level,\n    listItem: block.listItem,\n    children: [block]\n  }\n}\n\nfunction lastChild(block) {\n  return block.children && block.children[block.children.length - 1]\n}\n\nfunction findListMatching(rootNode, matching) {\n  const filterOnType = typeof matching.listItem === 'string'\n  if (\n    rootNode._type === 'list' &&\n    rootNode.level === matching.level &&\n    (filterOnType && rootNode.listItem === matching.listItem)\n  ) {\n    return rootNode\n  }\n\n  const node = lastChild(rootNode)\n  if (!node) {\n    return false\n  }\n\n  return findListMatching(node, matching)\n}\n\nmodule.exports = nestLists\n", "const objectAssign = require('object-assign')\n\nmodule.exports = blocks => {\n  return blocks.map(block => {\n    if (block._key) {\n      return block\n    }\n\n    return objectAssign({_key: getStaticKey(block)}, block)\n  })\n}\n\nfunction getStaticKey(item) {\n  return checksum(JSON.stringify(item))\n    .toString(36)\n    .replace(/[^A-Za-z0-9]/g, '')\n}\n\n/* eslint-disable no-bitwise */\nfunction checksum(str) {\n  let hash = 0\n  const strlen = str.length\n  if (strlen === 0) {\n    return hash\n  }\n\n  for (let i = 0; i < strlen; i++) {\n    hash = (hash << 5) - hash + str.charCodeAt(i)\n    hash &= hash // Convert to 32bit integer\n  }\n\n  return hash\n}\n/* eslint-enable no-bitwise */\n", "const objectAssign = require('object-assign')\nconst isDefined = val => typeof val !== 'undefined'\n\n// Recursively merge/replace default serializers with user-specified serializers\nmodule.exports = function mergeSerializers(defaultSerializers, userSerializers) {\n  return Object.keys(defaultSerializers).reduce((acc, key) => {\n    const type = typeof defaultSerializers[key]\n    if (type === 'function') {\n      acc[key] = isDefined(userSerializers[key]) ? userSerializers[key] : defaultSerializers[key]\n    } else if (type === 'object') {\n      acc[key] = objectAssign({}, defaultSerializers[key], userSerializers[key])\n    } else {\n      acc[key] =\n        typeof userSerializers[key] === 'undefined' ? defaultSerializers[key] : userSerializers[key]\n    }\n    return acc\n  }, {})\n}\n", "const objectAssign = require('object-assign')\nconst buildMarksTree = require('./buildMarksTree')\nconst nestLists = require('./nestLists')\nconst generateKeys = require('./generateKeys')\nconst mergeSerializers = require('./mergeSerializers')\n\n// Properties to extract from props and pass to serializers as options\nconst optionProps = ['projectId', 'dataset', 'imageOptions']\nconst isDefined = val => typeof val !== 'undefined'\nconst defaults = {imageOptions: {}}\n\nfunction blocksToNodes(h, properties, defaultSerializers, serializeSpan) {\n  const props = objectAssign({}, defaults, properties)\n  const rawBlocks = Array.isArray(props.blocks) ? props.blocks : [props.blocks]\n  const keyedBlocks = generateKeys(rawBlocks)\n  const blocks = nestLists(keyedBlocks, props.listNestMode)\n  const serializers = mergeSerializers(defaultSerializers, props.serializers || {})\n\n  const options = optionProps.reduce((opts, key) => {\n    const value = props[key]\n    if (isDefined(value)) {\n      opts[key] = value\n    }\n    return opts\n  }, {})\n\n  function serializeNode(node, index, siblings, isInline) {\n    if (isList(node)) {\n      return serializeList(node)\n    }\n\n    if (isListItem(node)) {\n      return serializeListItem(node, findListItemIndex(node, siblings))\n    }\n\n    if (isSpan(node)) {\n      return serializeSpan(node, serializers, index, {serializeNode})\n    }\n\n    return serializeBlock(node, index, isInline)\n  }\n\n  function findListItemIndex(node, siblings) {\n    let index = 0\n    for (let i = 0; i < siblings.length; i++) {\n      if (siblings[i] === node) {\n        return index\n      }\n\n      if (!isListItem(siblings[i])) {\n        continue\n      }\n\n      index++\n    }\n\n    return index\n  }\n\n  function serializeBlock(block, index, isInline) {\n    const tree = buildMarksTree(block)\n    const children = tree.map((node, i, siblings) => serializeNode(node, i, siblings, true))\n    const blockProps = {\n      key: block._key || `block-${index}`,\n      node: block,\n      isInline,\n      serializers,\n      options\n    }\n\n    return h(serializers.block, blockProps, children)\n  }\n\n  function serializeListItem(block, index) {\n    const key = block._key\n    const tree = buildMarksTree(block)\n    const children = tree.map(serializeNode)\n    return h(serializers.listItem, {node: block, serializers, index, key, options}, children)\n  }\n\n  function serializeList(list) {\n    const type = list.listItem\n    const level = list.level\n    const key = list._key\n    const children = list.children.map(serializeNode)\n    return h(serializers.list, {key, level, type, options}, children)\n  }\n\n  // Default to false, so `undefined` will evaluate to the default here\n  const renderContainerOnSingleChild = Boolean(props.renderContainerOnSingleChild)\n\n  const nodes = blocks.map(serializeNode)\n  if (renderContainerOnSingleChild || nodes.length > 1) {\n    const containerProps = props.className ? {className: props.className} : {}\n    return h(serializers.container, containerProps, nodes)\n  }\n\n  if (nodes[0]) {\n    return nodes[0]\n  }\n\n  return typeof serializers.empty === 'function' ? h(serializers.empty) : serializers.empty\n}\n\nfunction isList(block) {\n  return block._type === 'list' && block.listItem\n}\n\nfunction isListItem(block) {\n  return block._type === 'block' && block.listItem\n}\n\nfunction isSpan(block) {\n  return typeof block === 'string' || block.marks || block._type === 'span'\n}\n\nmodule.exports = blocksToNodes\n", "const getSerializers = require('./serializers')\nconst blocksToNodes = require('./blocksToNodes')\nconst getImageUrl = require('./getImageUrl')\nconst mergeSerializers = require('./mergeSerializers')\n\nmodule.exports = {\n  blocksToNodes: (renderNode, props, defaultSerializers, serializeSpan) => {\n    if (defaultSerializers) {\n      return blocksToNodes(renderNode, props, defaultSerializers, serializeSpan)\n    }\n\n    // Backwards-compatibility\n    const serializers = getSerializers(renderNode)\n    return blocksToNodes(\n      renderNode,\n      props,\n      serializers.defaultSerializers,\n      serializers.serializeSpan\n    )\n  },\n  getSerializers,\n  getImageUrl,\n  mergeSerializers\n}\n", "module.exports = require('./lib/internals')\n", "const {getImageUrl} = require('@sanity/block-content-to-hyperscript/internals')\n\nfunction renderChildren(props, divider = '') {\n  return Array.isArray(props.children) ? props.children.join(divider) : props.children\n}\n\nfunction block(props) {\n  const style = props.node.style || 'normal'\n\n  if (/^h\\d$/.test(style)) {\n    const hashes = new Array(parseInt(style[1], 10) + 1).join('#')\n    return `${hashes} ${renderChildren(props)}`\n  }\n\n  if (style === 'blockquote') {\n    return `> ${renderChildren(props)}`\n  }\n\n  return renderChildren(props)\n}\n\nfunction RawMarkSerializer(char, padWhitespace, props) {\n  const children = renderChildren(props)\n\n  if (padWhitespace) {\n    const startContent = children.search(/\\S/)\n    const endContent = children.search(/\\S(?=\\s*$)/)\n\n    if (endContent == -1 || startContent == -1) {\n      return children\n    }\n\n    const start = children.substring(0, startContent)\n    const end = children.substring(endContent + 1)\n\n    const content = children.substring(startContent, endContent + 1)\n\n    return `${start}${char}${content}${char}${end}`\n  }\n\n  return `${char}${children}${char}`\n}\n\nfunction link(props) {\n  const {href, title} = props.mark\n  const linkTitle = title ? ` ${JSON.stringify(title)}` : ''\n  return `[${renderChildren(props)}](${href}${linkTitle})`\n}\n\nfunction list(props) {\n  const indentation = new Array(props.level || 1).join('  ')\n  return indentation + renderChildren(props, `\\n${indentation}`)\n}\n\nfunction listItem(props) {\n  const isBullet = props.node.listItem === 'bullet'\n  const char = isBullet ? '*' : `${props.index + 1}.`\n  return `${char} ${renderChildren(props)}`\n}\n\nfunction image(props) {\n  const {title, alt} = props\n  const url = getImageUrl(props)\n  const imgTitle = title ? ` ${JSON.stringify(title)}` : ''\n  return `![${alt || ''}](${url}${imgTitle})`\n}\n\nfunction container(props) {\n  return renderChildren(props, '\\n\\n')\n}\n\nfunction hardBreak() {\n  return '  \\n'\n}\n\nmodule.exports = {\n  types: {\n    block,\n    image\n  },\n\n  marks: {\n    'strike-through': RawMarkSerializer.bind(null, '~~', true),\n    em: RawMarkSerializer.bind(null, '_', true),\n    code: RawMarkSerializer.bind(null, '`', false),\n    strong: RawMarkSerializer.bind(null, '**', true),\n    underline: renderChildren,\n    link\n  },\n\n  list,\n  listItem,\n  container,\n  hardBreak,\n  markFallback: renderChildren\n}\n", "const {\n  getImageUrl,\n  getSerializers,\n  blocksToNodes,\n  mergeSerializers\n} = require('@sanity/block-content-to-hyperscript/internals')\n\nconst mdSerializers = require('./serializers')\n\nconst disallowedEmptyMarks = ['strike-through', 'em', 'strong', 'underline']\n\nconst sanitizeEmptyMarkedSpans = (blocks = []) => {\n  const sanitizedBlock = block => {\n    if (block._type === 'block' && Array.isArray(block.children)) {\n      const newBlock = Object.assign({}, block)\n\n      newBlock.children = sanitizeEmptyMarkedSpans(block.children)\n\n      return newBlock\n    }\n\n    if (block._type === 'span' && block.text.length == 0 && Array.isArray(block.marks)) {\n      const allowedEmptyMarks = block.marks.filter(mark => {\n        return !disallowedEmptyMarks.includes(mark)\n      })\n\n      if (allowedEmptyMarks.length == 0) {\n        return null\n      }\n\n      return Object.assign({}, block, {\n        marks: allowedEmptyMarks\n      })\n    }\n\n    return block\n  }\n\n  return Array.isArray(blocks)\n    ? blocks.map(sanitizedBlock).filter(block => !!block)\n    : sanitizedBlock(blocks)\n}\n\nconst renderNode = (render, props, childNodes) => {\n  const children = childNodes || (props.node && props.node.children)\n  return render(Object.assign({}, props, {children}))\n}\n\nconst {defaultSerializers, serializeSpan} = getSerializers(renderNode)\nconst markdownSerializers = mergeSerializers(defaultSerializers, mdSerializers)\n\nconst toMarkdown = (block, options = {}) => {\n  const blocks = sanitizeEmptyMarkedSpans(block || [])\n  const serializers = mergeSerializers(markdownSerializers, options.serializers || {})\n  const props = Object.assign({}, options, {blocks, serializers, listNestMode: 'last-child'})\n  return blocksToNodes(renderNode, props, defaultSerializers, serializeSpan).trim()\n}\n\n// Expose default serializers to the user\ntoMarkdown.defaultSerializers = defaultSerializers\n\n// Expose logic for building image URLs from an image reference/node\ntoMarkdown.getImageUrl = getImageUrl\n\nmodule.exports = toMarkdown\n"],
  "mappings": "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",
  "names": ["example", "parseAssetId", "ref", "split", "id", "dimensionString", "format", "Error", "imgWidthStr", "imgHeightStr", "width", "height", "isValidAssetId", "isFinite", "isRef", "src", "source", "_ref", "isAsset", "_id", "isAssetStub", "asset", "url", "parseSource", "image", "isUrl", "urlToId", "img", "crop", "hotspot", "applyDefaults", "test", "parts", "slice", "replace", "result", "left", "top", "bottom", "right", "x", "y", "SPEC_NAME_TO_URL_NAME_MAPPINGS", "urlForImage", "options", "spec", "cropLeft", "Math", "round", "cropTop", "hotSpotVerticalRadius", "hotSpotHorizontalRadius", "hotSpotCenterX", "hotSpotCenterY", "rect", "focalPoint", "ignoreImageParams", "fit", "specToImageUrl", "cdnUrl", "baseUrl", "filename", "projectId", "dataset", "params", "isEffectiveCrop", "push", "bg", "flip", "flipHorizontal", "flipVertical", "filter", "Boolean", "join", "forEach", "mapping", "specName", "param", "encodeURIComponent", "length", "cropRect", "imgWidth", "imgHeight", "desiredAspectRatio", "cropAspectRatio", "hotspotXCenter", "hotspotYCenter", "max", "floor", "validFits", "validCrops", "validAutoModes", "isSanityClientLike", "client", "clientConfig", "rewriteSpecName", "key", "specs", "entry", "urlBuilder", "apiUrl", "apiHost", "ImageUrlBuilder", "parent", "withOptions", "newOptions", "hasOwnProperty", "specKey", "dpr", "maxWidth", "minWidth", "maxHeight", "minHeight", "size", "blur", "sharpen", "invert", "orientation", "quality", "forceDownload", "download", "value", "indexOf", "saturation", "auto", "pad", "toString", "generateHelpUrl", "require", "urlBuilder", "objectAssign", "enc", "encodeURIComponent", "materializeError", "getQueryString", "options", "query", "imageOptions", "keys", "Object", "length", "params", "map", "key", "join", "buildUrl", "props", "node", "projectId", "dataset", "asset", "Error", "url", "ref", "_ref", "image", "toString", "module", "exports", "objectAssign", "require", "getImageUrl", "module", "exports", "h", "serializerOpts", "serializeOptions", "useDashedStyles", "BlockSerializer", "props", "node", "serializers", "options", "isInline", "children", "blockType", "_type", "serializer", "types", "Error", "SpanSerializer", "mark", "isPlain", "markType", "marks", "console", "warn", "markFallback", "ListSerializer", "tag", "type", "ListItemSerializer", "style", "block", "BlockTypeSerializer", "test", "RawMarkSerializer", "UnderlineSerializer", "textDecoration", "StrikeThroughSerializer", "LinkSerializer", "href", "ImageSerializer", "asset", "img", "src", "serializeSpan", "span", "index", "hardBreak", "key", "text", "map", "child", "i", "serializeNode", "serializedNode", "_key", "HardBreakSerializer", "defaultMarkSerializers", "strong", "bind", "em", "code", "underline", "link", "defaultSerializers", "image", "list", "listItem", "container", "undefined", "empty", "defaultMarks", "buildMarksTree", "block", "children", "markDefs", "length", "sortedMarks", "map", "sortMarksByOccurences", "rootNode", "_type", "nodeStack", "forEach", "span", "i", "marksNeeded", "lastNode", "push", "pos", "mark", "markKey", "index", "indexOf", "splice", "slice", "currentNode", "findLastParentNode", "node", "_key", "find", "def", "isTextSpan", "lines", "text", "split", "line", "concat", "spans", "marks", "markOccurences", "reduce", "occurences", "siblingIndex", "sibling", "Array", "isArray", "sortByOccurence", "sortMarks", "bind", "sort", "markA", "markB", "aOccurences", "bOccurences", "aDefaultPos", "bDefaultPos", "nodes", "undefined", "module", "exports", "objectAssign", "require", "nestLists", "blocks", "mode", "tree", "currentList", "i", "length", "block", "isListBlock", "push", "listFromBlock", "blockMatchesList", "children", "level", "newList", "lastListItem", "lastChild", "newLastChild", "concat", "match", "findListMatching", "listItem", "console", "warn", "Boolean", "list", "_type", "_key", "rootNode", "matching", "filterOnType", "node", "module", "exports", "objectAssign", "require", "module", "exports", "blocks", "map", "block", "_key", "getStaticKey", "item", "checksum", "JSON", "stringify", "toString", "replace", "str", "hash", "strlen", "length", "i", "charCodeAt", "objectAssign", "require", "isDefined", "val", "module", "exports", "mergeSerializers", "defaultSerializers", "userSerializers", "Object", "keys", "reduce", "acc", "key", "type", "objectAssign", "require", "buildMarksTree", "nestLists", "generateKeys", "mergeSerializers", "optionProps", "isDefined", "val", "defaults", "imageOptions", "blocksToNodes", "h", "properties", "defaultSerializers", "serializeSpan", "props", "rawBlocks", "Array", "isArray", "blocks", "keyedBlocks", "listNestMode", "serializers", "options", "reduce", "opts", "key", "value", "serializeNode", "node", "index", "siblings", "isInline", "isList", "serializeList", "isListItem", "serializeListItem", "findListItemIndex", "isSpan", "serializeBlock", "i", "length", "block", "tree", "children", "map", "blockProps", "_key", "listItem", "list", "type", "level", "renderContainerOnSingleChild", "Boolean", "nodes", "containerProps", "className", "container", "empty", "_type", "marks", "module", "exports", "getSerializers", "require", "blocksToNodes", "getImageUrl", "mergeSerializers", "module", "exports", "renderNode", "props", "defaultSerializers", "serializeSpan", "serializers", "require_internals", "require", "getImageUrl", "renderChildren", "props", "divider", "Array", "isArray", "children", "join", "block", "style", "node", "test", "hashes", "parseInt", "RawMarkSerializer", "char", "padWhitespace", "startContent", "search", "endContent", "start", "substring", "end", "content", "link", "mark", "href", "title", "linkTitle", "JSON", "stringify", "list", "indentation", "level", "listItem", "isBullet", "index", "image", "alt", "url", "imgTitle", "container", "hardBreak", "module", "exports", "types", "marks", "bind", "em", "code", "strong", "underline", "markFallback", "require", "getImageUrl", "getSerializers", "blocksToNodes", "mergeSerializers", "mdSerializers", "disallowedEmptyMarks", "sanitizeEmptyMarkedSpans", "blocks", "sanitizedBlock", "block", "_type", "Array", "isArray", "children", "newBlock", "Object", "assign", "text", "length", "marks", "allowedEmptyMarks", "filter", "includes", "mark", "map", "renderNode", "render", "props", "childNodes", "node", "defaultSerializers", "serializeSpan", "markdownSerializers", "toMarkdown", "options", "serializers", "listNestMode", "trim", "module", "exports"]
}
